export declare class ActorMetadata {
    agents: Record<string, AgentDefinition>;
    skills: Record<string, SkillDefinition>;
    questions: Record<string, QuestionDefinition>;
    answers: Record<string, AnswerDefinition>;
    skillRequests: Record<string, SkillRequestDefinition>;
    observers: Record<string, ObserverDefinition>;
    pendingTypes: Record<string, ClassDefinition>;
    inputTypes: Record<string, ClassDefinition>;
    outputTypes: Record<string, ClassDefinition>;
    loaders: Record<string, Function>;
    constructor();
    getAgent(name: string): AgentDefinition;
    defineAgent(cls: string, cnstr: Function, base: string | null, options: AgentOptions): AgentDefinition;
    getLoader(name: string): Function;
    defineLoader(cls: string, impl: Function): void;
    defineSkill(cls: string, fun: MetaFunction, options: SkillOptions, impl: Function): void;
    defineQuestion(cls: string, fun: MetaFunction, options: QuestionOptions, impl: Function): void;
    defineAnswer(cls: string, fun: MetaFunction, options: AnswerOptions, impl: Function): void;
    defineSkillRequest(cls: string, fun: MetaFunction, options: SkillRequestOptions, impl: Function): SkillRequestDefinition;
    defineObserver(cls: string, fun: MetaFunction, options: ObserverOptions, impl: Function): void;
    getAgents(): AgentDefinition[];
    getSkills(): SkillDefinition[];
    getQuestions(): QuestionDefinition[];
    getAnswers(): AnswerDefinition[];
    getSkillRequests(): SkillRequestDefinition[];
    getObservers(): ObserverDefinition[];
    defineInputType(name: string, cnstr: Function): void;
    defineOutputType(name: string, cnstr: Function): void;
    defineField(cls: string, name: string, type: ValueType, options: FieldOptions): void;
    getCreateClass(name: string): ClassDefinition;
    getClass(name: string): ClassDefinition;
    getRequiredClass(name: string): ClassDefinition;
    getTypeClass(type: ValueType): ClassDefinition;
    getKeyProviders(actorClass: string): SkillDefinition[];
    isKeyProvider(skill: SkillDefinition): boolean;
    getProviderKey(fun: MetaFunction): MetaField;
    isKeyDestroyer(skill: SkillDefinition): boolean;
    getKeyIn(fun: MetaFunction): MetaField;
    getKeyOut(fun: MetaFunction): MetaField;
    getKeyConsumers(actorClass: string, key: string): SkillDefinition[];
    getInputFields(fun: MetaFunction): MetaField[];
    getOutputFields(fun: MetaFunction): MetaField[];
    private validateSkill;
}
export interface UiCard {
    type: 'AdaptiveCard';
    "$schema"?: string;
    "version": string;
    body: object[];
}
export interface AgentDefinition {
    cls: string;
    cnstr: Function;
    base: string | null;
    options: AgentOptions;
}
export interface AgentOptions {
    subject?: string;
    status?: Function[];
    singleton?: boolean;
    sessions?: boolean;
    abstract?: boolean;
}
export interface SkillDefinition {
    cls: string;
    fun: MetaFunction;
    options: SkillOptions;
    impl: Function;
}
export interface SkillOptions {
    subject?: string;
    action: string;
    background?: boolean;
    returns?: ValueType;
    form?: UiCard;
    displayRequest?: UiCard;
    displayResponse?: UiCard;
}
export interface QuestionDefinition {
    cls: string;
    fun: MetaFunction;
    options: QuestionOptions;
    impl: Function;
}
export interface QuestionOptions {
    action: string;
    id?: string;
    background?: boolean;
    returns?: ValueType;
    form?: UiCard;
    displayQuestion?: UiCard;
    displayAnswer?: UiCard;
}
export interface AnswerDefinition {
    cls: string;
    fun: MetaFunction;
    options: AnswerOptions;
    impl: Function;
}
export interface AnswerOptions {
    id?: string;
    action: string;
    question?: Function;
    questionForm?: UiCard;
    displayQuestion?: UiCard;
    displayAnswer?: UiCard;
}
export interface SkillRequestDefinition {
    cls: string;
    fun: MetaFunction;
    options: SkillRequestOptions;
    impl: Function;
}
export interface SkillRequestOptions {
    subject: string;
    action: string;
    returns: ValueType;
}
export interface ObserverDefinition {
    cls: string;
    fun: MetaFunction;
    options: ObserverOptions;
    impl: Function;
}
export interface ObserverOptions {
    subject: string;
    action: string;
}
export interface ClassDefinition {
    name: string;
    cnstr?: Function;
    fields: Record<string, MetaField>;
}
export interface MetaField {
    name: string;
    type: ValueType;
    options: FieldOptions;
}
export interface FieldOptions {
    key?: 'new' | 'auto' | 'active' | 'destroy';
    hidden?: boolean;
    save?: boolean;
    restore?: boolean;
    optional?: boolean;
    type?: ValueType;
}
export interface MetaFunction {
    name: string;
    parameters: MetaParameter[];
    conversation?: string;
    requester?: string;
    returnType?: ValueType;
}
export interface MetaParameter {
    name: string;
    destructured: boolean;
    type: Function;
}
export type ValueType = Function | Function[];
export declare function isObjectParameter(parameters: MetaParameter[]): boolean;
export declare function isObjectType(type: ValueType): boolean;
export declare function isArrayType(type: ValueType): boolean;
export declare function isScalarType(type: ValueType): boolean;
export declare function isVoidType(type: ValueType): boolean;
export declare function getMetaStorage(): ActorMetadata;
