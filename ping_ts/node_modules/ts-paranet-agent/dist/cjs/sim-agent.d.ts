/// <reference types="node" />
import * as stream from 'stream';
declare class PlayReq {
    duration: number;
    speed: number;
    start_time: string;
}
export declare abstract class SimAgent {
    simName: string;
    dataSource: stream.Readable;
    firstEventTime: Date;
    iterator: AsyncIterator<object>;
    localBaseTime: number;
    simBaseTime: number;
    simStopTime?: number;
    speed: number;
    done: boolean;
    paused: boolean;
    nextRecord: object;
    lastRecordTime: Date;
    lastPrint: number;
    recordCount: number;
    cancelRunLoop: Function;
    canceled: Promise<void>;
    constructor();
    started(): void;
    rollCall(): void;
    simPlay({ duration, speed, start_time }: PlayReq): void;
    simStop(): void;
    simReset(): void;
    registerSim(name: string, start_time: string): Promise<void>;
    signalStopped(name: string, stop_time: string): Promise<void>;
    signalFinished(name: string, end_time: string): Promise<void>;
    startSim(): Promise<void>;
    simInitSource(): Promise<void>;
    simRunLoop(): Promise<void>;
    waitUntil(dt: Date): Promise<void>;
    simWaitFor(ms: number): Promise<unknown>;
    advanceRecord(): Promise<void>;
    abstract createDataSource(): stream.Readable;
    abstract getNextTime(record?: object): Date | undefined;
    abstract step(record: object): any;
}
export {};
